@using FLRC.Leaderboards.Core.Athletes
@using FLRC.Leaderboards.Core.Results
@model AthleteSummaryViewModel

<h2>
	@Model.Summary.Athlete.Name
	<small>(@Model.Summary.Athlete.AgeToday&nbsp;@Model.Summary.Athlete.Category?.Display)</small>
</h2>

<div class="card card-highlighted mb-3">
	<div class="card-body">
		<dl class="row mb-0">
			@await Html.PartialAsync("Overall-" + (Model.Config.Features.MultiAttempt ? "MultiAttempt" : "Competitions"), Model)
		</dl>
		<div class="text-center">
			<a href="/Athlete/Log/@Model.Summary.Athlete.ID" class="btn btn-xs btn-light">
				Activity Log
				<i aria-hidden="true" class="far fa-arrow-alt-circle-right"></i>
			</a>
			@if (Model.Config.Features.MultiAttempt && !Model.Summary.Athlete.Private)
			{
				<a href="/Athlete/Similar/@Model.Summary.Athlete.ID" class="btn btn-xs btn-light">
					Similar Athletes
					<i aria-hidden="true" class="far fa-arrow-alt-circle-right"></i>
				</a>
			}
		</div>
	</div>
</div>

<div class="row">
	@foreach (var (course, _) in Model.Summary.All.Where(r => r.Value != null && r.Value.Any()))
	{
		<div class="col-12 col-lg-6">
			<div class="card-highlighted card mb-3">
				<div class="card-body no-activity-log">
					@await Html.PartialAsync("CourseInfo", new CourseResultsViewModel { Course = course, Config = Model.Config })
					@if (!Model.Summary.Athlete.Private && Model.Summary.Fastest[course] == null)
					{
						<div class="alert alert-danger">
							There is an invalid result for this course.
							Please check the the <a href="/Invalid">Invalid Results</a> page,
							and correct any errors by using the timing app or contacting the Race Director.
						</div>
					}
					else
					{
						<dl class="row mb-0 mt-3">
							@if (!Model.Summary.Athlete.Private)
							{
								<dt class="col-6">
									@(Model.Config.Features.MultiAttempt ? "Fastest" : string.Empty) Time
								</dt>
								<dd class="col-6">
									@Model.Summary.Fastest[course].Value?.Display
									(<a href="/Course/@course.ID/@course.Distance.Display/Fastest/@Model.Summary.Athlete.Category?.Value">@Model.Summary.Fastest[course].Rank?.Display</a>)
								</dd>
								<dt class="col-6">
									Points
								</dt>
								<dd class="col-6">
									@Model.Summary.Fastest[course].Points?.Display
								</dd>
								<dt class="col-6">
									Age Grade
								</dt>
								<dd class="col-6">
									@Model.Summary.Fastest[course].AgeGrade?.Display
								</dd>
							}

							@if (Model.Config.Features.MultiAttempt)
							{
								@if (!Model.Summary.Athlete.Private)
								{
									<dt class="col-6">
										Average (Top @course.AverageThreshold(new Filter(Model.Summary.Athlete.Category)))
									</dt>
									<dd class="col-6">
										@if (Model.Summary.Average[course] != null)
										{
											@Model.Summary.Average[course].Value?.Display
											@:(<a href="/Course/@course.ID/@course.Distance.Display/BestAverage/@Model.Summary.Athlete.Category?.Value">@Model.Summary.Average[course].Rank.Display</a>)
										}
										else
										{
											@:(not enough runs)
										}
									</dd>
								}
								<dt class="col-6">
									# of Runs
								</dt>
								<dd class="col-6">
									@Model.Summary.Runs[course].Value
									(<a href="/Course/@course.ID/MostRuns">@Model.Summary.Runs[course].Rank.Display</a>)
								</dd>
							}
							@if (Model.Config.Features.CommunityStars)
							{
								<dt class="col-6">
									Community Stars
								</dt>
								<dd class="col-6">
									@(Model.Summary.CommunityStars[course]?.Value.Display ?? "0")
								</dd>
							}
						</dl>
					}
				</div>
				@if (Model.Config.Features.MultiAttempt)
				{
					<div class="card-footer">
						<a href="/Athlete/@Model.Summary.Athlete.ID/Course/@course.ID">View All Runs</a>
					</div>
				}
			</div>
		</div>
	}
</div>