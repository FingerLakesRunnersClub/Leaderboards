@using FLRC.Leaderboards.Core.Leaders
@model LeaderboardViewModel

@functions
{
	string style(LeaderboardResultType type) => Model.LeaderboardResultType == type
		? "secondary"
		: "light";
}

<h2>Overall Leaders</h2>
<div class="card card-highlighted">
	<div class="card-body">
		<div class="row justify-content-center">
			@{ var overallResults = Model.OverallResults(); }
			@foreach (var table in overallResults)
			{
				var width = table.Link.Contains("/Points/") && overallResults.Length % 2 == 1 ? "col-lg-6" : "col-lg-4";
				<div class="col-12 @width mb-3">
					@await Html.PartialAsync("Table", table)
				</div>
			}
		</div>
	</div>
</div>

<h2 class="mt-3">Course Leaders</h2>
@if (Model.Config.Features.MultiAttempt)
{
	<div class="btn-group mb-2">
		@foreach (var type in Enum.GetValues<LeaderboardResultType>())
		{
			<a class="btn btn-sm btn-@style(type)" href="/Leaderboard/Index/@type">@type</a>
		}
	</div>
}
@foreach (var (course, tables) in Model.CourseResults.Where(r => r.Value.Any(t => t.Rows.Value.Any())))
{
	var width = 12 / tables.Length;

	<div class="card card-highlighted mb-3">
		<div class="card-header">
			@course.Name
			<a style="margin: 2px 5px 0;" class="float-right" href="@course.Race.URL" title="Course Info" target="_blank">
				<i aria-hidden="true" class="fas fa-info-circle"></i>
			</a>
			@if (Model.Config.Features.ShowBadges)
			{
				<span class="float-right">
					<span class="badge badge-pill badge-secondary">@course.Race.Type</span>
					<span class="badge badge-pill badge-warning">@course.Distance.Display</span>
				</span>
			}
		</div>
		<div class="card-body">
			<div class="row">
				@foreach (var table in tables)
				{
					var margin = table == tables.Last() ? "mb-0" : "mb-3 mb-lg-0";
					<div class="col-12 col-lg-@width @margin">
						@await Html.PartialAsync("Table", table)
					</div>
				}
			</div>
		</div>
	</div>
}